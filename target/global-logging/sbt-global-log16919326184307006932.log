[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\zen\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\zen\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.6)
[debug]       Load.loadUnit: plugins took 104.632ms
[debug]       Load.loadUnit: defsScala took 0.3399ms
[debug] [Loading] Scanning directory C:\Users\zen\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zen\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.4608 ms
[debug]           Load.resolveProject(global-plugins) took 62.4424ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\zen\.sbt\1.0\plugins, plugins: List(<none>))) took 108.168ms
[debug] [Loading] Done in C:\Users\zen\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 129.8969ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2844ms
[debug]     Load.loadUnit(file:/C:/Users/zen/.sbt/1.0/plugins/, ...) took 242.824ms
[debug]   Load.apply: load took 465.0082ms
[debug]   Load.apply: resolveProjects took 8.0483ms
[debug]   Load.apply: finalTransforms took 73.9443ms
[debug]   Load.apply: config.delegates took 15.128ms
[debug]   Load.apply: Def.make(settings)... took 900.8303ms
[debug]   Load.apply: structureIndex took 212.0813ms
[debug]   Load.apply: mkStreams took 20.8658ms
[info] loading global plugins from C:\Users\zen\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3747.2239ms
[debug]           Load.loadUnit: plugins took 28.0477ms
[debug]           Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\Users\zen\bakemon-scala\project
[debug]             Load.loadUnit: mkEval took 7.3104ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zen\bakemon-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9562 ms
[info] loading settings for project bakemon-scala-build from idea.sbt ...
[debug]               Load.resolveProject(bakemon-scala-build) took 3.0878ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bakemon-scala-build, base: C:\Users\zen\bakemon-scala\project, plugins: List(<none>))) took 5.7393ms
[debug] [Loading] Done in C:\Users\zen\bakemon-scala\project, returning: (bakemon-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 128.2974ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.8872ms
[debug]         Load.loadUnit(file:/C:/Users/zen/bakemon-scala/project/, ...) took 163.3307ms
[debug]       Load.apply: load took 165.2118ms
[debug]       Load.apply: resolveProjects took 0.1098ms
[debug]       Load.apply: finalTransforms took 13.2346ms
[debug]       Load.apply: config.delegates took 0.5082ms
[debug]       Load.apply: Def.make(settings)... took 133.7016ms
[debug]       Load.apply: structureIndex took 68.3178ms
[debug]       Load.apply: mkStreams took 0.005ms
[info] loading project definition from C:\Users\zen\bakemon-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1435.2123ms
[debug]     Load.loadUnit: defsScala took 0.0095ms
[debug] [Loading] Scanning directory C:\Users\zen\bakemon-scala
[debug]       Load.loadUnit: mkEval took 0.3519ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5731 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 30.6996ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\zen\bakemon-scala, plugins: List(<none>))) took 35.2778ms
[debug] [Loading] Done in C:\Users\zen\bakemon-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2363.381ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.3926ms
[debug]   Load.loadUnit(file:/C:/Users/zen/bakemon-scala/, ...) took 3810.2983ms
[debug] Load.apply: load took 3811.8801ms
[debug] Load.apply: resolveProjects took 0.1057ms
[debug] Load.apply: finalTransforms took 19.0568ms
[debug] Load.apply: config.delegates took 0.3184ms
[debug] Load.apply: Def.make(settings)... took 48.6365ms
[debug] Load.apply: structureIndex took 18.7759ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to bakemon-scala (in build file:/C:/Users/zen/bakemon-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60962 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60962, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to bakemon-scala (in build file:/C:/Users/zen/bakemon-scala/)
[debug] > Exec(idea-shell, None, None)
