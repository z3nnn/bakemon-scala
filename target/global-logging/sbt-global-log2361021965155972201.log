[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\zen\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\zen\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.6)
[debug]       Load.loadUnit: plugins took 74.9866ms
[debug]       Load.loadUnit: defsScala took 0.2245ms
[debug] [Loading] Scanning directory C:\Users\zen\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zen\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.8778 ms
[debug]           Load.resolveProject(global-plugins) took 28.6336ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\zen\.sbt\1.0\plugins, plugins: List(<none>))) took 50.6156ms
[debug] [Loading] Done in C:\Users\zen\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 65.9806ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1537ms
[debug]     Load.loadUnit(file:/C:/Users/zen/.sbt/1.0/plugins/, ...) took 148.0976ms
[debug]   Load.apply: load took 254.3002ms
[debug]   Load.apply: resolveProjects took 3.2716ms
[debug]   Load.apply: finalTransforms took 31.7982ms
[debug]   Load.apply: config.delegates took 5.1875ms
[debug]   Load.apply: Def.make(settings)... took 248.6424ms
[debug]   Load.apply: structureIndex took 76.1251ms
[debug]   Load.apply: mkStreams took 2.4457ms
[info] loading global plugins from C:\Users\zen\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1450.2658ms
[debug]           Load.loadUnit: plugins took 18.6051ms
[debug]           Load.loadUnit: defsScala took 0.0073ms
[debug] [Loading] Scanning directory C:\Users\zen\bakemon-scala\project
[debug]             Load.loadUnit: mkEval took 3.2431ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\zen\bakemon-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5575 ms
[info] loading settings for project bakemon-scala-build from idea1.sbt ...
[debug]               Load.resolveProject(bakemon-scala-build) took 2.0003ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bakemon-scala-build, base: C:\Users\zen\bakemon-scala\project, plugins: List(<none>))) took 4.3008ms
[debug] [Loading] Done in C:\Users\zen\bakemon-scala\project, returning: (bakemon-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1623.9041ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.075ms
[debug]         Load.loadUnit(file:/C:/Users/zen/bakemon-scala/project/, ...) took 1647.4069ms
[debug]       Load.apply: load took 1648.491ms
[debug]       Load.apply: resolveProjects took 0.0873ms
[debug]       Load.apply: finalTransforms took 6.0671ms
[debug]       Load.apply: config.delegates took 0.3225ms
[debug]       Load.apply: Def.make(settings)... took 56.0659ms
[debug]       Load.apply: structureIndex took 24.7412ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\zen\bakemon-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2325.2986ms
[debug]     Load.loadUnit: defsScala took 0.0016ms
[debug] [Loading] Scanning directory C:\Users\zen\bakemon-scala
[debug]       Load.loadUnit: mkEval took 0.1496ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8314 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.5549ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\zen\bakemon-scala, plugins: List(<none>))) took 38.3787ms
[debug] [Loading] Done in C:\Users\zen\bakemon-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 859.1025ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.4445ms
[debug]   Load.loadUnit(file:/C:/Users/zen/bakemon-scala/, ...) took 3193.4349ms
[debug] Load.apply: load took 3194.7885ms
[debug] Load.apply: resolveProjects took 0.0863ms
[debug] Load.apply: finalTransforms took 25.1567ms
[debug] Load.apply: config.delegates took 0.2427ms
[debug] Load.apply: Def.make(settings)... took 34.3131ms
[debug] Load.apply: structureIndex took 13.4402ms
[debug] Load.apply: mkStreams took 0.0015ms
[info] set current project to bakemon-scala (in build file:/C:/Users/zen/bakemon-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60469 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60469, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to bakemon-scala (in build file:/C:/Users/zen/bakemon-scala/)
[debug] > Exec(idea-shell, None, None)
